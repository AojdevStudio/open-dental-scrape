{
  "id": "api-developer-setup",
  "type": "api",
  "title": "Developer Setup",
  "path": "/Users/aojdevstudio/cursor-projects/open-dental-scrape/docs/api-documentation/API Developer Setup.txt",
  "content": "API Developer Setup\nSee API Specification\n\nThe API web service is hosted at Open Dental headquarters. All requests are routed through this address to the appropriate office. The API Key specified in the Authorization header is linked to a specific office.\n\nFor additional information on integration types, see: Open Dental Integration Types.\n\nSteps to Enable the API\nSee API Guide - Getting Started.\n\nIn order to use the Remote API, the office must have an eConnector running. See eConnector for installation instructions. Customers will receive an Alert if their eConnector stops working.\n\nThen, the developer will work with the customer to enable the API within Open Dental. Have the customer go to API Setup and check the Enabled checkbox. This is also where additional customer keys can be created and disabled.\n\nFor setup information for other API modes, see API Modes - Local, Service, and Cloud.\n\nAPI Keys\nWhen requesting data from the API server, two API keys must be present in the request header: a Developer API Key and a Customer API Key. The Developer API key is unique to each developer and is obtained by logging into the Developer Portal. Customer API Keys are unique to each customer/developer pair and generated by the developer within the portal.\n\nTo obtain Developer Portal access contact vendor.relations@opendental.com. Please include the details below.\n\nProduct/Integration Owner (Company Name):\nContact Phone Number:\nEmail address for long-term billing:\nMailing address for long-term billing:\n3rd Party Developer Name (if any):\n3rd Party Developer Email Address:\nA list of the API resources you need access to and for each permission, whether you need read, create, or update for that permission:\nA description of the application you are intending to build (type and purpose):\n\nTo assign a Customer API key to an Open Dental customer, they will go to Setup > Advanced Setup > API. Click the Add Key in the lower left. Here is where you paste a key generated from the developer portal. The customer has the ability to enable or disable a key. The customer can view permissions granted to that key, but they cannot change those permissions. The interface in this window displays information from our HQ server, not the customer database.\n\nWhen using the window described above, a copy of the keys are placed in a table in the customer's local database called \"apikey\". This table will then contain the customer's apikeys and each corresponding developer name exactly as entered in the developer portal. Occasionally, you may want to retrieve this information via a query. This will be rare, but can be accomplished with the following example:\n\nSELECT CustApiKey FROM apikey WHERE DevName='YourName';\n\nDeveloper Portal\nThe Developer Portal is where third-party developers can add or move keys, see key permissions, or edit account details. The process of moving a key may take up to 15 minutes to take effect.\n\nAuthorization\nEach API request must include an Authorization header in this format:\n\nAuthorization: ODFHIR {DeveloperKey}/{CustomerKey}\n\nFor testing, the following credentials can be used:\nAuthorization: ODFHIR NFF6i0KrXrxDkZHt/VzkmZEaUWOjnQX2z\n\nTesting\nWe use Postman for testing API requests and Webhook.site for testing API Events, but there are other options.\n\nOpen Dental hosts a test database for developers to test against. The base URL is the same endpoint listed above.\n\nSee the Authorization section above for the test credentials.\n\nRetrieving Aging Data\nThese steps work for very large databases and should be taken to retrieve Aging data.\n\nWithin Open Dental:\n\nEnsure the Open Dental Service is running.\nEnsure the preference Automated Aging Runtime has a time entered.\nVia the API:\n\nUse GET preferences to retrieve the date and time aging last ran.\nSupplying PrefName=DateLastAging returns the date aging ran.\nSupplying PrefName=AgingServiceTimeDue returns the time aging ran. (Ignore the date component.)\nIf DateLastAging has not been updated, wait until after the time in AgingServiceTimeDue has passed before moving forward.\nUse PUT queries/ShortQuery to query the patient table for the guarantors that have balances.\nOptional: Providing a clinicNum reduces execution time.\nExample query:\nSELECT patnum, estbalance, bal_0_30, bal_31_60, bal_61_90, balover90, insest, baltotal FROM patient WHERE patnum=guarantor and clinicnum=@ClinicNum AND ( estbalance>0 OR bal_0_30>0 OR bal_31_60>0 OR bal_61_90>0 OR balover90>0 OR insest>0 OR baltotal>0)\n\nTo get aging data as of a date other than today (not recommended), there are two options:\n\nUse GET reports/Aging. This endpoint does not run in a timely fashion on larger databases.\nFor larger databases, set up an SFTP server and use Query Example 1655.",
  "metadata": {
    "version": "",
    "lastUpdated": "",
    "category": [
      "API"
    ],
    "tags": [
      "Developer Setup",
      "Examples"
    ]
  },
  "endpoints": [],
  "relationships": [
    {
      "type": "references",
      "target": "db-for",
      "description": "References database table for"
    },
    {
      "type": "references",
      "target": "db-in",
      "description": "References database table in"
    },
    {
      "type": "references",
      "target": "db-will",
      "description": "References database table will"
    },
    {
      "type": "references",
      "target": "db-patient",
      "description": "API references database table patient"
    },
    {
      "type": "references",
      "target": "db-clinic",
      "description": "API references database table clinic"
    },
    {
      "type": "references",
      "target": "db-apikey",
      "description": "API references database table apikey"
    },
    {
      "type": "references",
      "target": "db-document",
      "description": "API references database table document"
    },
    {
      "type": "references",
      "target": "db-site",
      "description": "API references database table site"
    },
    {
      "type": "references",
      "target": "db-account",
      "description": "API references database table account"
    },
    {
      "type": "references",
      "target": "db-preference",
      "description": "API references database table preference"
    },
    {
      "type": "references",
      "target": "db-contact",
      "description": "API references database table contact"
    },
    {
      "type": "references",
      "target": "db-supply",
      "description": "API references database table supply"
    }
  ]
}